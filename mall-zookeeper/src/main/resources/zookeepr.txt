===============================zookeeper客户端与服务端交互流程源码解析========================
1：启动zkCli.sh时其实运行的是ZooKeeperMain这个类
  1>初始化ClientCnxn，其中在里面声明了两个线程SendThread，EventThread

  ConsoleReader这个类是读取客户端控制台输入

2：启动zkServer.sh时其实运行的是QuorumPeerMain这个类

zookeeper底层使用了nio实现客户端与服务端数据传输通信

outgoingQueue

pendingQueue？ 等待服务器返回结果的packet

客户端：
1：初始化socket连接
2：客户端命令---request---packet--outGoingQueue
每一个客户端连接都有一个outGoingQueue



服务端：
QuorumPeerConfig这是配置类
create /name leek
1.创建事务日志
2.快照，DataBase---DataTree----DataNode
3.更新内存，操作DataTree
4.返回错误或者正确信息

服务器启动的时候：
1.从文件里取数据加载到内存Database



事务日志和快照
持久化，内存(DataTree，DataNode)和


================================zookeeper单机模式与集群模式处理请求源码解析=========================

服务端单机模式下处理数据有一个请求处理链的概念


服务端抛出来的事件，客户端会存在EventThread.waitingEvents队列里，EventThread这个类是一个线程
这是三个处理器的字母开头
Prep
Sync
Final

关闭session：客户端输入quit指令，触发close


2月02号
===================================Zookeeper集群模式下的请求处理流程源码解析（ZK是如何保证数据一致性的？）====

单机模式下，服务器端启动大概流程
1.加载配置
2.启动socket
3.初始化RequestProcessor
4.返回Response



集群模式：

1.加载配置
  从快照里面导出数据到内存
2.启动socket
---Leader选举
---同步数据
3.初始化RequestProcessor
4.返回Response

Leader节点在获得客户端写请求时，Leader节点会像集群中的Follower节点发送提议，
Follower在接收到提议之后，会给Leader节点回复一个ack，Leader节点统计ack数量，如果过半则像Follower节点发送commit提交数据
也会告诉Observer节点

在配置集群时如果需要配置一个Observer节点，则那台服务器启动的配置文件需要加入peerType=observer配置


可以看到，在Zookeeper中总共定义了4中状态：

LOOKING: 表示此台机器正在寻找leader，也就是说在选举状态；

FOLLOWING: 表示此台机器是follower；

LEADING: 表示此台机器是leader；

OBSERVING: 表示此台机器是observer。

Leader选举是保证分布式数据一致性的关键所在

每台服务器在启动的过程中，会启动一个QuorumPeerManager，负责各台服务器之间的底层Leader选举过程中的网络通信



同步数据
处理写请求



领导者选举的理论知识？

1:确定节点的角色
2:同步数据
3:接受RequestProcessor，接受请求


zookeeper中选举领导时
1.数据最新(zxid)

每个服务器都有自己的投票箱
当前自己的投票/选票

1.服务器启动的时候
1.1先投自己一票
<id,xzid>









