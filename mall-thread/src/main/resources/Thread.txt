线程的生命周期：
new--runnable-running-block-terminated


Runnable接口的作用？
为了将你的可执行逻辑单元与你的线程控制分离开来

守护线程？

intercept:打断，中断当前执行的线程

01:18号看到P25

线程间通信？


总线加锁
缓存一致性协议(MESI)
总线嗅探机制

缓存行失效？
1：如果X存储长度大于一个缓存行，加总线锁。
2：CPU本身并不支持缓存一致性协议




并发产生的问题：
高并发场景下：导致频繁的上下问切换
临界区线程安全问题：容易出现死锁，产生死锁就会造成系统功能不可用


JMM模型:是一种规范，屏蔽底层操作系统的差异


内存屏障
指令重排


volatile:保证可见性，有序性，禁止指令重排序，不保证原子性，基于缓存一致性协议



2021-01-19：高并发视频---P30


wait和sleep的区别？
1：sleep是Thread的方法，wait是所有object对象的方法
2：sleep不会释放锁，wait会释放锁，会将对象监控放入等待队列里
3：使用wait依赖同步锁，sleep不需要
4：sleep不需要被唤醒，wait需要唤醒wait(100L)带参数的除外


内存屏障:字节码编译的时候

写&写
store&store
写&读
store&load
load&load
load&store


手动加内存屏障：Unsafe

大量使用cas和volatile关键字的使用会产生什么问题？

什么情况下会导致总线风暴？

大量的线程和主存交互数据


====================================Java中同步========================

Synchronized
加static锁加在类对象上
不加static，锁加在this当前对象上

Lock--->ReentrantLock
AQS---->AbstractQueueSynchronizer


面试问题：实例对象内存中存储在哪？
如果没有逃逸行为，就会存入到堆中

JIT编译时会对代码进行 逃逸分析

如果加了逃逸分析优化，有部分实例对象可能会存入线程栈中

jmap -histo  pid

jvm优化，锁的粗化

开启偏向锁，性能可以提升10%


自旋不会丢弃CPU的使用权

AQS具备特性：

阻塞等待队列
共享/独占
公平/非公平
可重入
允许中断

ReentrantLock:独占/悲观锁

信号量  Semaphore

什么是原子操作？


原子操作是不可中断的一个或者一系列的操作。


AtomicReference： 利用版本号


条件队列往同步队列去转移，才有机会竞争锁


HashMap死锁问题？  链表产生一个环


线程池的状态？
running---shutdown-stop-->  --->


线程池为什么可以重用线程资源：：：


高三位用来记录线程状态
低29位用来记录当前工作线程数


P65:ThreadLocal

使用ThreadLocal线程机制，可以优化上下文数据传递问题


看到P150


















