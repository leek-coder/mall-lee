registerBeanPostProcessors;注册bean的后置处理器来方便拦截bean的创建
 1)先获取ioc容器已经定义了的需要创建对象的所有BeanPostProcessor


finishBeanFactoryInitialization：完成BeanFactory初始化工作，创建剩下的单实例Bean

如果一个bean是需要aop代理增强的就是创建一个代理对象(之前获取了好多增强器(通知方法))
org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization
2）创建业务逻辑组件和切面组件
   AnnotationAwareAspectJAutoProxyCreator拦截组件的创建过程
      组件创建完之后，判断组件是否需要增强
      是：切面的通知方法，包装成增强器(Advisor),给业务逻辑组件创建一个代理对象CGLib代理
3)执行目标方法
   代理对象执行目标方法
   CglibAopProxy.intercept()进行拦截
      1)得到目标方法的拦截器链
      2)利用拦截器的链式机制，依次进入每个拦截器进行执行
      3)效果：
         正常执行---前置通知----目标方法----后置通知--返回通知
         出现异常---前置通知----目标方法----后置通知--异常通知


====================================事务======================================================
@EnableTransactionManagement
@Transactional
在Spring项目中如果单单只导入这两个注解配置事务，还是不够的，需要配置

配置事务管理器:PlatformTransactionManager





=====================================扩展原理BeanFactoryPostProcessor===========================
BeanPostProcessors：bean的后置处理器，bean创建对象初始化前后进行拦截工作


扩展原理BeanFactoryPostProcessor：BeanFactory的后置处理器，
在BeanFactory标准初始化之后调用，所有的bean定义已经保存加载到BeanFactory，但是Bean的实例还没有创建
1)ioc容器创建对象
2)invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessor


================================扩展原理BeanDefinitionRegistryPostProcessor=====================

postProcessBeanDefinitionRegistry()
在所有bean定义信息将要被加载，bean实例还未创建的时候执行


==========================================扩展原理ApplicationListener===========================

initApplicationEventMulticaster()
registerListeners()
   从容器中拿到所有的监听器，把它们注册到applicationEventMulticaster中

ApplicationListener：监听容器中发布的事件，事件驱动模型开发
监听ApplicationEvent及其下面的子事件

步骤：
   1) 写一个监听器监听某个事件(ApplicationEvent及其子类)
   2)把监听器加入到容器
   3)只要容器中有相关事件的发布，我们就能监听到这个事件
        ContextRefreshedEvent：容器刷新完成(所有bean都完全创建)会发布这个事件
        ContextClosedEvent：容器关闭发布的事件
   4)发布一个事件
   使用事件派发器
   applicationContext.publishEvent(event);

=====================================扩展原理@EventListener与SmartInitializingSingleton=============================

@EventListener实现原理
使用EventListenerMethodProcessor解析@EventListener
EventListenerMethodProcessor实现了SmartInitializingSingleton这个接口执行afterSingletonsInstantiated()方法



initMessageSource():做国际化功能，消息绑定，消息解析

















